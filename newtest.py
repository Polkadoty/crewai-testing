import os
from crewai import Agent, Task, Crew, Process
import configparser

config = configparser.ConfigParser()
config.read('config.ini')
OPENAI_API_KEY = config.get('API', 'OPENAI_API_KEY')
os.environ["OPENAI_API_KEY"] = str(OPENAI_API_KEY)

from langchain_community.tools import DuckDuckGoSearchRun
search_tool = DuckDuckGoSearchRun()


senior_engineer = Agent(
  role='Senior Engineer',
  goal='Create a working python script to convert text from mathjax to latex',
  backstory="""You work at a leading tech company as a principal engineer.
  Your expertise lies in creating groundbreaking code.
  You have a knack for dissecting a complex problem and presenting
  actionable insights.""",
  verbose=True,
  allow_delegation=False,
  tools=[search_tool]
  # You can pass an optional llm attribute specifying what mode you wanna use.
  # It can be a local model through Ollama / LM Studio or a remote
  # model like OpenAI, Mistral, Antrophic of others (https://python.langchain.com/docs/integrations/llms/)
  #
  # Examples:
  # llm=ollama_llm # was defined above in the file
  # llm=ChatOpenAI(model_name="gpt-3.5", temperature=0.7)
)

junior_engineer = Agent(
    role='Junior Engineer',
    goal='Assist the senior engineer by performing any task they require',
    backstory="""You work at a leading tech company as a junior engineer assistant.
    Your expertise lies in checking and cleaning up code.
    You have a keen eye for identifying errors and improving code quality.
    Your attention to detail ensures that the code is well-structured and follows best practices.""",
    verbose=True,
    allow_delegation=True,
    tools=[search_tool]
)


# Create tasks for your agents


task1 = Task(
    description="""Create a python script that converts a .md file from Obsidian into a .tex file.
    The script should handle callouts and standard markdown formatting.
    The input file will be in Markdown format and may contain callouts, which should be preserved in the output.
    The output file should be in LaTeX format (.tex).
    The script should handle common markdown formatting elements such as headings, lists, bold, italic, code blocks, and links.
    Ensure that the script is able to handle different variations of markdown syntax and produce accurate LaTeX output.
    Your final answer MUST be the complete python script that performs the conversion.""",
    agent=senior_engineer
)



task2 = Task(
    description="""As a junior engineer, your task is to review and test the python script created by the senior engineer. Follow these instructions:
    1. Review the code: Carefully examine the script to ensure it follows best practices, is well-structured, and adheres to coding standards. Look for any potential errors, inefficiencies, or areas for improvement.
    2. Generate test cases: Create a set of test cases that cover different scenarios and edge cases. Test the script with various inputs, including different variations of markdown syntax, to ensure it produces accurate LaTeX output.
    3. Execute the tests: Run the script with the test cases you have generated. Verify that the output is correct and matches the expected LaTeX format. Take note of any discrepancies or errors.
    4. Rate the output quality: Evaluate the relative quality of the output generated by the script. Consider factors such as accuracy, formatting, and preservation of callouts. Provide a rating or feedback on the overall performance of the script.
    Your final deliverable should include a detailed report summarizing your findings, including any issues or improvements identified during the review process. Make sure to communicate your feedback effectively to the senior engineer.
    Remember to approach this task with attention to detail and a critical mindset. Your review and testing will contribute to the overall quality of the python script.
    """,
    agent=junior_engineer
)

# Instantiate your crew with a sequential process
crew = Crew(
  agents=[senior_engineer, junior_engineer],
  tasks=[task1, task2],
  verbose=2, # You can set it to 1 or 2 to different logging levels
)

# Get your crew to work!
result = crew.kickoff()

print("######################")
print(result)
